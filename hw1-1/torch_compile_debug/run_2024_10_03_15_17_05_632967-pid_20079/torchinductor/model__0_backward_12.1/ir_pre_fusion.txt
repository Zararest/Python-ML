buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', 0, {})]
buf0.unmet_dependencies = []
buf0.met_dependencies = 
    [   MemoryDep('primals_1', 0, {}),
        MemoryDep('primals_1', 1, {}),
        MemoryDep('primals_2', 0, {}),
        MemoryDep('primals_3', 0, {}),
        MemoryDep('sub_3', 0, {}),
        MemoryDep('tangents_1', 0, {})]
buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf2'), can_inplace=True, is_weak=False)]
buf0.group.device = cpu
buf0.group.iteration = ((), ())
buf0.sizes = ([], [])
class buf0_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_1', get_index)
        neg = ops.neg(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_2', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('primals_3', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(sub, sub)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('primals_1', get_index_4)
        truediv = ops.truediv(mul, load_4)
        sub_1 = ops.sub(load_1, truediv)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('sub_3', get_index_5)
        truediv_1 = ops.truediv(sub_1, load_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('sub_3', get_index_6)
        truediv_2 = ops.truediv(truediv_1, load_6)
        mul_1 = ops.mul(neg, truediv_2)
        neg_1 = ops.neg(mul_1)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('tangents_1', get_index_7)
        add = ops.add(neg_1, load_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('primals_2', get_index_8)
        mul_2 = ops.mul(add, load_8)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf0', get_index_9, mul_2, None)
        return store


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', 0, {})]
buf1.unmet_dependencies = [MemoryDep('buf0', 0, {})]
buf1.met_dependencies = 
    [   MemoryDep('primals_1', 0, {}),
        MemoryDep('primals_1', 1, {}),
        MemoryDep('primals_2', 0, {}),
        MemoryDep('primals_3', 0, {}),
        MemoryDep('sub_3', 0, {}),
        MemoryDep('tangents_1', 0, {})]
buf1.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=False, is_weak=False)]
buf1.group.device = cpu
buf1.group.iteration = ((), ())
buf1.sizes = ([], [])
class buf1_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('sub_3', get_index_1)
        truediv = ops.truediv(load, load_1)
        neg = ops.neg(truediv)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_1', get_index_2)
        truediv_1 = ops.truediv(neg, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_1', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('primals_3', get_index_4)
        sub = ops.sub(load_3, load_4)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(sub, constant)
        mul_1 = ops.mul(truediv_1, mul)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('tangents_1', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('primals_2', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('primals_1', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_1', get_index_8)
        truediv_2 = ops.truediv(load_7, load_8)
        add = ops.add(load_6, truediv_2)
        mul_2 = ops.mul(load_5, add)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('primals_2', get_index_9)
        mul_3 = ops.mul(mul_2, load_9)
        add_1 = ops.add(mul_1, mul_3)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tangents_1', get_index_10)
        get_index_11 = self.get_index('index0')
        load_11 = ops.load('primals_1', get_index_11)
        constant_1 = ops.constant(3.0, torch.float32)
        mul_4 = ops.mul(load_11, constant_1)
        get_index_12 = self.get_index('index0')
        load_12 = ops.load('primals_2', get_index_12)
        get_index_13 = self.get_index('index1')
        load_13 = ops.load('primals_1', get_index_13)
        mul_5 = ops.mul(load_12, load_13)
        add_2 = ops.add(mul_4, mul_5)
        mul_6 = ops.mul(load_10, add_2)
        neg_1 = ops.neg(mul_6)
        get_index_14 = self.get_index('index0')
        load_14 = ops.load('primals_1', get_index_14)
        get_index_15 = self.get_index('index1')
        load_15 = ops.load('primals_1', get_index_15)
        truediv_3 = ops.truediv(load_14, load_15)
        get_index_16 = self.get_index('index1')
        load_16 = ops.load('primals_1', get_index_16)
        truediv_4 = ops.truediv(truediv_3, load_16)
        mul_7 = ops.mul(neg_1, truediv_4)
        add_3 = ops.add(add_1, mul_7)
        get_index_17 = self.get_index('index0')
        load_17 = ops.load('buf0', get_index_17)
        get_index_18 = self.get_index('index1')
        load_18 = ops.load('primals_1', get_index_18)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_8 = ops.mul(load_18, constant_2)
        mul_9 = ops.mul(load_17, mul_8)
        add_4 = ops.add(add_3, mul_9)
        get_index_19 = self.get_index('index0')
        store = ops.store('buf1', get_index_19, add_4, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', 0, {})]
buf2.unmet_dependencies = [MemoryDep('buf0', 0, {})]
buf2.met_dependencies = 
    [   MemoryDep('primals_1', 0, {}),
        MemoryDep('primals_1', 1, {}),
        MemoryDep('primals_2', 0, {}),
        MemoryDep('primals_3', 0, {}),
        MemoryDep('sub_3', 0, {}),
        MemoryDep('tangents_1', 0, {})]
buf2.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=False, is_weak=False)]
buf2.group.device = cpu
buf2.group.iteration = ((), ())
buf2.sizes = ([], [])
class buf2_loop_body:
    var_ranges = {}
    index0 = 0
    index1 = 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('sub_3', get_index_1)
        truediv = ops.truediv(load, load_1)
        neg = ops.neg(truediv)
        neg_1 = ops.neg(neg)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_1', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('primals_3', get_index_3)
        sub = ops.sub(load_2, load_3)
        mul = ops.mul(sub, sub)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('primals_1', get_index_4)
        truediv_1 = ops.truediv(mul, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('primals_1', get_index_5)
        truediv_2 = ops.truediv(truediv_1, load_5)
        mul_1 = ops.mul(neg_1, truediv_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('tangents_1', get_index_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('primals_2', get_index_7)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('primals_1', get_index_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_1', get_index_9)
        truediv_3 = ops.truediv(load_8, load_9)
        add = ops.add(load_7, truediv_3)
        mul_2 = ops.mul(load_6, add)
        constant = ops.constant(3.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant)
        add_1 = ops.add(mul_1, mul_3)
        get_index_10 = self.get_index('index0')
        load_10 = ops.load('tangents_1', get_index_10)
        get_index_11 = self.get_index('index0')
        load_11 = ops.load('primals_1', get_index_11)
        constant_1 = ops.constant(3.0, torch.float32)
        mul_4 = ops.mul(load_11, constant_1)
        get_index_12 = self.get_index('index0')
        load_12 = ops.load('primals_2', get_index_12)
        get_index_13 = self.get_index('index1')
        load_13 = ops.load('primals_1', get_index_13)
        mul_5 = ops.mul(load_12, load_13)
        add_2 = ops.add(mul_4, mul_5)
        mul_6 = ops.mul(load_10, add_2)
        get_index_14 = self.get_index('index1')
        load_14 = ops.load('primals_1', get_index_14)
        truediv_4 = ops.truediv(mul_6, load_14)
        add_3 = ops.add(add_1, truediv_4)
        get_index_15 = self.get_index('index0')
        load_15 = ops.load('buf0', get_index_15)
        get_index_16 = self.get_index('index0')
        load_16 = ops.load('primals_1', get_index_16)
        constant_2 = ops.constant(2.0, torch.float32)
        mul_7 = ops.mul(load_16, constant_2)
        mul_8 = ops.mul(load_15, mul_7)
        add_4 = ops.add(add_3, mul_8)
        get_index_17 = self.get_index('index0')
        store = ops.store('buf2', get_index_17, add_4, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: 2})]
buf3.unmet_dependencies = [MemoryDep('buf1', 0, {}), MemoryDep('buf2', 0, {})]
buf3.met_dependencies = []
buf3.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf3.group.device = cpu
buf3.group.iteration = ((2,), ())
buf3.sizes = ([2], [])
class buf3_loop_body:
    var_ranges = {z0: 2}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(1, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf1', get_index_1)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(0, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_3)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf3', get_index_4, add, None)
        return store


